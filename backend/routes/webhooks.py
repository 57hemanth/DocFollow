from fastapi import APIRouter, Request, Form, HTTPException
from backend.database import db
from backend.services.whatsapp_service import whatsapp_service
from typing import Optional
import logging

logger = logging.getLogger(__name__)
router = APIRouter()

@router.post("/webhooks/whatsapp")
async def whatsapp_webhook(
    request: Request,
    From: str = Form(...),
    To: str = Form(...),
    Body: str = Form(...),
    MessageSid: str = Form(...),
    AccountSid: str = Form(...),
    NumMedia: Optional[str] = Form("0"),
    MediaUrl0: Optional[str] = Form(None),
    MediaContentType0: Optional[str] = Form(None)
):
    """
    Handle incoming WhatsApp messages from Twilio
    
    This webhook receives messages sent by patients to the WhatsApp Sandbox number
    """
    try:
        logger.info(f"Received WhatsApp message from {From}: {Body}")
        
        # Extract phone number (remove 'whatsapp:' prefix)
        patient_phone = From.replace("whatsapp:", "")
        
        # Find patient by phone number
        patient = db.patients.find_one({"phone": patient_phone})
        
        if not patient:
            logger.warning(f"No patient found with phone number: {patient_phone}")
            # Could optionally send a response message here
            return {"status": "success", "message": "Patient not found"}
        
        # Create a follow-up record for this message
        followup_data = {
            "patient_id": str(patient["_id"]),
            "doctor_id": patient["doctor_id"],
            "original_data": {
                "message": Body,
                "message_sid": MessageSid,
                "phone": patient_phone,
                "has_media": int(NumMedia) > 0,
                "media_url": MediaUrl0 if MediaUrl0 else None,
                "media_type": MediaContentType0 if MediaContentType0 else None
            },
            "extracted_data": {},  # Will be populated by AI processing
            "ai_draft_message": "",  # Will be generated by AI
            "doctor_decision": "pending",  # pending/approved/edited/custom
            "final_message_sent": False,
            "created_at": None  # Will be set by the database
        }
        
        result = db.followups.insert_one(followup_data)
        
        logger.info(f"Created follow-up record {result.inserted_id} for patient {patient['name']}")
        
        response_message = f"Thank you for your message! Dr. {patient.get('doctor_name', 'your doctor')} will review it and get back to you soon."
        
        return {
            "status": "success", 
            "message": "Message processed",
            "followup_id": str(result.inserted_id)
        }
        
    except Exception as e:
        logger.error(f"Error processing WhatsApp webhook: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to process message")

@router.get("/webhooks/whatsapp")
async def whatsapp_webhook_verify(request: Request):
    """
    Webhook verification endpoint for Twilio
    """
    return {"status": "WhatsApp webhook endpoint active"}

@router.post("/webhooks/whatsapp/test")
async def test_whatsapp_send():
    """
    Test endpoint to send a WhatsApp message
    """
    if not whatsapp_service.is_configured():
        raise HTTPException(status_code=500, detail="WhatsApp service not configured")
    
    # This is for testing - replace with actual phone number
    test_number = "+1234567890"  # Replace with your test number
    test_message = "Hello! This is a test message. WhatsApp integration is working! ðŸŽ‰"
    
    result = await whatsapp_service.send_message(test_number, test_message)
    
    if result["success"]:
        return {"status": "success", "message": "Test message sent", "result": result}
    else:
        raise HTTPException(status_code=500, detail=f"Failed to send message: {result['error']}")
